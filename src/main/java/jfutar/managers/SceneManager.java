package jfutar.managers;

import javafx.animation.TranslateTransition;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.util.Duration;
import jfutar.views.AbstractView;

import java.util.Objects;
import java.util.Stack;

import static jfutar.views.Main.PLAN_VIEW;

/**
 * Ez az oszt√°ly felel≈ës a Scene/Panek kezel√©s√©√©rt.
 * Kellemes mell√©khat√°sa a teljes oszt√°lyp√©ld√°ny √°tad√°s√°nak az aut√≥matikus ujrat√∂lt√©s Scene v√°lt√°s eset√©n.
 */
public final class SceneManager {
    private static AbstractView currentView;
    private static final Stack<AbstractView> viewStack = new Stack<>();
    private static StackPane rootLayout;

    /**
     * Inicializ√°lja az alkalmaz√°s f≈ëablak√°t (stage), be√°ll√≠tja az alappanelt,
     * CSS-t, valamint a bez√°r√°s esem√©nyt (le√°ll√≠tja az aktu√°lis view-t).
     *
     * @param stage a JavaFX Stage p√©ld√°ny
     */
    public static void setStage(Stage stage) {
        rootLayout = new StackPane();
        Scene scene = new Scene(rootLayout, 450, 800);
        scene.getStylesheets().add(Objects.requireNonNull(SceneManager.class.getResource("/styles.css")).toExternalForm());
        stage.setScene(scene);

        // App bez√°r√°sakor le√°ll√≠tjuk a jelenlegi view-t (√©s ezzel a threadjeit is)
        stage.setOnCloseRequest(_ -> {
            if (currentView != null) currentView.stop();
            System.out.println("Alkalmaz√°s bez√°rva, h√°tt√©rsz√°lak le√°ll√≠tva.");
        });
    }

    /**
     * Megjelen√≠t egy √∫j view-t anim√°ci√≥val, le√°ll√≠tva az el≈ëz≈ët.
     * A fejemben m≈±k√∂d√∂tt de itt nem akar teljes m√©rt√©kben.
     * @param newView az √∫j megjelen√≠tend≈ë {@link AbstractView}
     */
    public static void show(AbstractView newView) {
        // Ha van jelenlegi view, le√°ll√≠tjuk azt, √©s elmentj√ºk a stack-be (visszal√©p√©shez)
        if (currentView != null) {
            currentView.stop();
            viewStack.push(currentView);
        }

        // A jelenlegi view-t elmentj√ºk previousk√©nt, hogy tudjuk anim√°lni
        AbstractView previousView = currentView;

        // Uj view-t be√°ll√≠tjuk azt elind√≠tjuk
        currentView = newView;
        currentView.start();

        // √öj view view-je üíÄ
        Node newNode = newView.getView();

        // Ha volt el≈ëz≈ë view, akkor annak is
        Node oldNode = previousView != null ? previousView.getView() : null;

        // Az √∫j view a k√©perny≈ë jobb oldal√°n k√≠v√ºlr≈ël indul
        newNode.setTranslateX(rootLayout.getWidth()); // √∫j view jobbr√≥l indul

        // Hozz√°adjuk a view-t a StackPane-hez (a r√©givel egy√ºtt lesz benne)
        rootLayout.getChildren().add(newNode);

        // Anim√°ci√≥ - az √∫j view 250ms alatt becs√∫szik jobbr√≥l k√∂z√©pre
        TranslateTransition slideIn = new TranslateTransition(Duration.millis(250), newNode);
        slideIn.setToX(0);

        // Ha van r√©gi view, akkor azt balra ki kell anim√°lni (mindig lesz, hacsak a semmit t√∂ltj√ºk be)
        if (oldNode != null) {
            TranslateTransition slideOut = new TranslateTransition(Duration.millis(250), oldNode);
            slideOut.setToX(-rootLayout.getWidth());

            // Amint az anim√°ci√≥ v√©get √©r, elt√°vol√≠tjuk a r√©gi view-t
            slideOut.setOnFinished(_ -> rootLayout.getChildren().remove(oldNode));
            slideOut.play();
        }

        slideIn.play();
    }

    /**
     * Visszal√©p az el≈ëz≈ë view-ra anim√°ci√≥val, vagy ha m√°r nincs m√°s, visszat√©r a f≈ë PlanView-hoz.
     * A fejemben m≈±k√∂d√∂tt de itt nem akar teljes m√©rt√©kben.
     */
    public static void back() {
        // Ha nincs kor√°bbi view, nincs mit csin√°lni
        if (viewStack.isEmpty()) return;

        // Le√°ll√≠tjuk az aktu√°lis view sz√°ljait
        currentView.stop();
        AbstractView oldView = currentView;
        AbstractView newView;

        // Ha m√°r csak egy van a stackben, visszat√©r√ºnk a planView-hez
        if (viewStack.size() < 2) {
            newView = PLAN_VIEW;
            viewStack.clear();
        }
        else newView = viewStack.pop();

        // Be√°ll√≠tjuk az √∫j aktu√°lis view-t √©s elind√≠tjuk
        currentView = newView;
        currentView.start();

        // Lek√©rj√ºk a view-ek viewjeit lol
        Node newNode = newView.getView();
        Node oldNode = oldView.getView();

        newNode.setTranslateX(-rootLayout.getWidth()); // √∫j view balr√≥l j√∂n be
        rootLayout.getChildren().add(newNode);

        // Az √∫j view 250ms alatt balr√≥l becs√∫szik
        TranslateTransition slideIn = new TranslateTransition(Duration.millis(250), newNode);
        slideIn.setToX(0);

        // A r√©gi view 250ms alatt jobbra kics√∫szik
        TranslateTransition slideOut = new TranslateTransition(Duration.millis(250), oldNode);
        slideOut.setToX(rootLayout.getWidth());

        // Az anim√°ci√≥ v√©g√©n elt√°vol√≠tjuk a r√©gi view-t a StackPane-b≈ël
        slideOut.setOnFinished(_ -> rootLayout.getChildren().remove(oldNode));

        // Egyszerre
        slideOut.play();
        slideIn.play();
    }
}